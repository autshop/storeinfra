Description: >
  ECS Core Api Service template for core services.

Parameters:
  VPC:
    Description: The VPC that the ECS cluster is deployed to
    Type: AWS::EC2::VPC::Id

  Cluster:
    Description: Please provide the ECS Cluster ID that this service should run on
    Type: String

  DesiredCount:
    Description: How many instances of this task should we run across our cluster?
    Type: Number
    Default: 1

  Listener:
    Description: The Application Load Balancer listener to register with
    Type: String

  Path:
    Description: The path to register with the Application Load Balancer
    Type: String
    Default: /api/*

  SecretArn:
    Description: Arn of secret.
    Type: String

  ExecutionRoleArn:
    Description: Arn of role.
    Type: String

Resources:
  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      Cluster: !Ref Cluster
      Role: !Ref ServiceRole
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      ServiceName: !Join [ "-", [ !Ref Cluster, "core-api-service" ] ]
      LoadBalancers:
        - ContainerName: "core-api"
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: core-api
      ExecutionRoleArn: !Ref ExecutionRoleArn
      ContainerDefinitions:
        - Name: core-api
          Essential: true
          Image: docker.io/akosfi/core-api:latest
          Memory: 128
          PortMappings:
            - ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
          Secrets:
            - Name: DB_USERNAME
              ValueFrom: !Join [":", [!Ref SecretArn, "DB_USERNAME::"]]
            - Name: DB_PASSWORD
              ValueFrom: !Join [":", [!Ref SecretArn, "DB_PASSWORD::"]]
            - Name: DB_SERVER
              ValueFrom: !Join [":", [!Ref SecretArn, "DB_SERVER::"]]
            - Name: DB_NAME
              ValueFrom: !Join [":", [!Ref SecretArn, "DB_NAME::"]]
            - Name: DB_PORT
              ValueFrom: !Join [":", [!Ref SecretArn, "DB_PORT::"]]
            - Name: PORT
              ValueFrom: !Join [":", [!Ref SecretArn, "PORT::"]]
            - Name: JWT_SECRET
              ValueFrom: !Join [":", [!Ref SecretArn, "JWT_SECRET::"]]
            - Name: ELEPHANTSQL_API_KEY
              ValueFrom: !Join [":", [!Ref SecretArn, "ELEPHANTSQL_API_KEY::"]]
            - Name: AWS_ACCESS_KEY_ID
              ValueFrom: !Join [":", [!Ref SecretArn, "AWS_ACCESS_KEY_ID::"]]
            - Name: AWS_SECRET_ACCESS_KEY
              ValueFrom: !Join [":", [!Ref SecretArn, "AWS_SECRET_ACCESS_KEY::"]]
            - Name: AWS_CDN_ACCESS_KEY_ID
              ValueFrom: !Join [":", [!Ref SecretArn, "AWS_CDN_ACCESS_KEY_ID::"]]
            - Name: AWS_CDN_SECRET_ACCESS_KEY
              ValueFrom: !Join [":", [!Ref SecretArn, "AWS_CDN_SECRET_ACCESS_KEY::"]]

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 365

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /api/aws
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref Listener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - !Ref Path
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  # This IAM Role grants the service access to register/unregister with the
  # Application Load Balancer (ALB). It is based on the default documented here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-service-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: !Sub ecs-service-${AWS::StackName}
          PolicyDocument:
            {
              "Version": "2012-10-17",
              "Statement":
                [
                  {
                    "Effect": "Allow",
                    "Action":
                      [
                          "ec2:AuthorizeSecurityGroupIngress",
                          "ec2:Describe*",
                          "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                          "elasticloadbalancing:Describe*",
                          "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                          "elasticloadbalancing:DeregisterTargets",
                          "elasticloadbalancing:DescribeTargetGroups",
                          "elasticloadbalancing:DescribeTargetHealth",
                          "elasticloadbalancing:RegisterTargets"
                      ],
                    "Resource": "*"
                  }
                ]
            }
